---
AWSTemplateFormatVersion: '2010-09-09'
Description: Setup AWS Resources for TODO API Service Backend
Parameters:
  ServiceName:
    Description: Name of Service
    Type: String
  DeployStage:
    Default: dev
    Description: The stage this stack is being deployed to.
    Type: String
  PreExistingAPIID:
    Description: "Optional API ID of pre-existing API GW endpoint. Leave empty to have created and managed by this stack."
    Type: String
    Default: ""
  ServiceLambda:
    Description: Name of Service Handler Lambda
    Type: String
  CustomAuthLambda:
    Description: Name of Custom Auth Lambda
    Type: String

Conditions:
  NeedsNewAPI:
    Fn::Equals:
      - Ref: PreExistingAPIID
      - ""

Resources:
  RestApiStack:
    Condition: NeedsNewAPI
    Type: AWS::CloudFormation::Stack
    Properties:
       TemplateURL: https://raw.githubusercontent.com/komushi/grunt-aws-deploy/master/cfn/api-gw-rest-api.yaml
       TimeoutInMinutes: '10'
       Parameters:
         APIName:
           Fn::Sub: "${ServiceName}-${DeployStage}-API"
  ServiceLambdaRolesStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://raw.githubusercontent.com/komushi/grunt-aws-deploy/master/cfn/lambda-roles-s3.yaml
      TimeoutInMinutes: '10'
  ServiceLambdaStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://raw.githubusercontent.com/komushi/grunt-aws-deploy/master/cfn/api-gw-lambda.yaml
      TimeoutInMinutes: '10'
      Parameters:
        LambdaFunctionName: 
          Ref: ServiceLambda
        LambdaExecutionRoleARN:
          Fn::GetAtt:
            - ServiceLambdaRolesStack
            - Outputs.LambdaExecutionRoleARN
# Custom Auth Resources
  LambdaInvokePolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: "Policy for allowing Lambda Invoke"
      Path: "/"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Action:
            - "lambda:InvokeFunction"
            Resource: "*"
  AuthorizerInvokeRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - Ref: LambdaInvokePolicy
  CustomAuthLambdaRoles:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://raw.githubusercontent.com/komushi/grunt-aws-deploy/master/cfn/lambda-roles.yaml
      TimeoutInMinutes: '10'
  CustomAuth:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://raw.githubusercontent.com/komushi/grunt-aws-deploy/master/cfn/lambda.yaml
      TimeoutInMinutes: '10'
      Parameters:
        LambdaFunctionName:
          Ref: CustomAuthLambda
        LambdaExecutionRoleARN:
          Fn::GetAtt:
            - CustomAuthLambdaRoles
            - Outputs.LambdaExecutionRoleARN
        HandlerName: index.authorize

Outputs:
  APIID:
    Description: Rest API ID
    Value:
      Fn::If: 
          - NeedsNewAPI
          - Fn::GetAtt:
            - RestApiStack
            - Outputs.APIID
          - Ref: PreExistingAPIID
  AwsRegion:
    Description: AwsRegion
    Value:
      Ref: AWS::Region
  LambdaARN:
    Description: 'Service Lambda ARN'
    Value:
      Fn::GetAtt:
        - ServiceLambdaStack
        - Outputs.LambdaARN
  CustomAuthLambdaARN:
    Description: 'Custom Auth Lambda ARN'
    Value: 
      Fn::GetAtt:
        - CustomAuth
        - Outputs.LambdaARN
  CustomAuthLambdaRoleARN:
    Description: Custom Authorizer Invoke Role ARN
    Value:
      Fn::GetAtt:
        - AuthorizerInvokeRole
        - "Arn"