---
AWSTemplateFormatVersion: '2010-09-09'
Description: Setup AWS Resources for TODO API Service Backend
Parameters:
  ServiceName:
    Description: Name of Service
    Type: String
  DeployStage:
    Default: dev
    Description: The stage this stack is being deployed to.
    Type: String
  PreExistingAPIID:
    Description: "Optional API ID of pre-existing API GW endpoint. Leave empty to have created and managed by this stack."
    Type: String
    Default: ""
  ServiceLambda:
    Description: Name of Service Handler Lambda
    Type: String
  # CustomAuthLambdaName:
  #   Description: Name of Custom Auth Lambda
  #   Type: String

Conditions:
  NeedsNewAPI: !Equals [!Ref PreExistingAPIID, ""]

Resources:
  RestApiStack:
    Condition: NeedsNewAPI
    Type: AWS::CloudFormation::Stack
    Properties:
       TemplateURL: http://yaml-cfn-templates.s3.amazonaws.com/snippets/api-gw-rest-api.yaml
       TimeoutInMinutes: '10'
       Parameters:
         APIName: !Sub "${ServiceName}-${DeployStage}-API"
  ServiceLambdaRolesStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3-eu-west-1.amazonaws.com/rosa-lambda-artifacts/cfn/lambda-roles-s3.yaml
      TimeoutInMinutes: '10'
  ServiceLambdaStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: http://yaml-cfn-templates.s3.amazonaws.com/snippets/api-gw-lambda.yaml
      TimeoutInMinutes: '10'
      Parameters:
        LambdaFunctionName: !Ref ServiceLambda
        LambdaExecutionRoleARN: !GetAtt [ServiceLambdaRolesStack, Outputs.LambdaExecutionRoleARN]

# Custom Auth Resources

  # LambdaInvokePolicy:
  #   Type: "AWS::IAM::ManagedPolicy"
  #   Properties:
  #     Description: "Policy for allowing Lambda Invoke"
  #     Path: "/"
  #     PolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         -
  #           Effect: Allow
  #           Action:
  #           - "lambda:InvokeFunction"
  #           Resource: "*"
  # AuthorizerInvokeRole:
  #   Type: "AWS::IAM::Role"
  #   Properties:
  #     Path: "/"
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         -
  #           Effect: "Allow"
  #           Principal:
  #             Service:
  #               - "apigateway.amazonaws.com"
  #           Action:
  #             - "sts:AssumeRole"
  #     ManagedPolicyArns:
  #       - Ref: LambdaInvokePolicy
  # CustomAuthLambdaRoles:
  #   Type: AWS::CloudFormation::Stack
  #   Properties:
  #     TemplateURL: http://yaml-cfn-templates.s3.amazonaws.com/snippets/lambda-roles.yaml
  #     TimeoutInMinutes: '10'
  # CustomAuth:
  #   Type: AWS::CloudFormation::Stack
  #   Properties:
  #     TemplateURL: http://yaml-cfn-templates.s3.amazonaws.com/snippets/vlambda.yaml
  #     TimeoutInMinutes: '10'
  #     Parameters:
  #       LambdaFunctionName: !Ref CustomAuthLambdaName
  #       LambdaExecutionRoleARN: !GetAtt [CustomAuthLambdaRoles, Outputs.LambdaExecutionRoleARN]
  #       HandlerName: index.authorize


Outputs:
  APIID:
    Description: Rest API ID
    Value: !If [ NeedsNewAPI, !GetAtt [ RestApiStack, Outputs.APIID ], !Ref PreExistingAPIID ]
  AwsRegion:
    Description: AwsRegion
    Value: !Ref AWS::Region
  LambdaARN:
    Description: 'Service Lambda ARN'
    Value: !GetAtt [ ServiceLambdaStack, Outputs.LambdaARN ]
  # CustomAuthLambdaARN:
  #   Description: 'Custom Auth Lambda ARN'
  #   Value: !GetAtt [ CustomAuth, Outputs.LambdaARN ]
  # CustomAuthLambdaRoleARN:
  #   Description: Custom Authorizer Invoke Role ARN
  #   Value:
  #     !GetAtt [AuthorizerInvokeRole, "Arn"]