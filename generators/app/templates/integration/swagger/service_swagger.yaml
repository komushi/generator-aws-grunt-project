---
swagger: "2.0"
info:
  version: "1"
  title: "TODO API"
schemes:
- "https"
paths:
  /{fruit}:
    put:
      security:
        - custom-authorizer: []
      responses: {}
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:${AwsRegion}:lambda:path/2015-03-31/functions/${LambdaARN}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
    get:
      security:
        - custom-authorizer: []
      responses: {}
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:${AwsRegion}:lambda:path/2015-03-31/functions/${LambdaARN}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
    post:
      security:
        - custom-authorizer: []
      responses: {}
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:${AwsRegion}:lambda:path/2015-03-31/functions/${LambdaARN}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
    delete:
      security:
        - custom-authorizer: []
      responses: {}
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:${AwsRegion}:lambda:path/2015-03-31/functions/${LambdaARN}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"

#====================================================================
#=                       Custom Authorizer                          =
#====================================================================
securityDefinitions:
  custom-authorizer:
    type: apiKey
    name: Authorization
    in: header
    x-amazon-apigateway-authtype: custom
    x-amazon-apigateway-authorizer:
      type: token
      authorizerUri: "arn:aws:apigateway:${AwsRegion}:lambda:path/2015-03-31/functions/${CustomAuthLambdaARN}/invocations"
      authorizerCredentials: "${CustomAuthLambdaRoleARN}"
      authorizerResultTtlInSeconds: 60